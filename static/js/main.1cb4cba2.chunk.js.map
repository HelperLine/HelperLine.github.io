{"version":3,"sources":["images/Drawing_Logo_Project.svg","App/Page.jsx","Wrapper/Themer.jsx","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","flexGrow","tab","minWidth","contentContainer","marginTop","Page","props","tabContent","classes","useState","setTab","className","src","ProjectImage","alt","Paper","clsx","Tabs","value","onChange","event","indicatorColor","textColor","centered","variant","Tab","label","Container","maxWidth","theme","createMuiTheme","palette","primary","main","transparent80","transparent60","transparent40","transparent20","transparent10","secondary","white","gray1","gray2","Themer","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kD,0QCarCC,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,GAEdC,IAAK,CACDC,SAAU,KAEdC,iBAAkB,CACdC,UAAW,MAKNC,EAAO,SAACC,GAEjB,IAIIC,EAJEC,EAAUX,IAFW,EAIPY,mBAAS,CAACR,IAAK,WAJR,mBAItBA,EAJsB,KAIjBS,EAJiB,KAQ3B,OAAQT,EAAIA,KACR,IAAK,SACDM,EAAa,SACb,MACJ,IAAK,UACDA,EAAa,UACb,MACJ,IAAK,WACDA,EAAa,WACb,MACJ,IAAK,OACDA,EAAa,OACb,MACJ,QACIA,EAAa,GAIrB,OACI,6BACI,yBAAKI,UAAU,gBACX,yBAAKC,IAAKC,IAAcC,IAAI,eAAeH,UAAU,UACrD,kBAACI,EAAA,EAAD,CAAOJ,UAAWK,YAAKR,EAAQT,KAAM,aACjC,kBAACkB,EAAA,EAAD,CACIC,MAAOjB,EAAIA,IACXkB,SAAU,SAACC,EAAOF,GAAR,OAAkBR,EAAO,CAACT,IAAKiB,KACzCG,eAAe,YACfC,UAAU,YACVC,UAAQ,EACRC,QAAQ,cAER,kBAACC,EAAA,EAAD,CAAKP,MAAM,SAASQ,MAAM,SAASf,UAAWH,EAAQP,MACtD,kBAACwB,EAAA,EAAD,CAAKP,MAAM,UAAUQ,MAAM,UAAUf,UAAWH,EAAQP,MACxD,kBAACwB,EAAA,EAAD,CAAKP,MAAM,WAAWQ,MAAM,WAAWf,UAAWH,EAAQP,MAC1D,kBAACwB,EAAA,EAAD,CAAKP,MAAM,OAAOQ,MAAM,OAAOf,UAAWH,EAAQP,SAI9D,kBAAC0B,EAAA,EAAD,CAAWC,SAAS,KAAKjB,UAAU,oBAC/B,yBAAKA,UAAU,kBACVJ,MCxDfsB,EAAQC,YAAe,CAC5BC,QAAU,CACTC,QAAS,CACRC,KAAM,qBACNC,cAAe,2BACfC,cAAe,2BACfC,cAAe,2BACfC,cAAe,2BACfC,cAAe,4BAEhBC,UAAW,CACVN,KAAM,qBACNC,cAAe,2BACfC,cAAgB,2BAChBC,cAAgB,2BAChBC,cAAgB,2BAChBC,cAAgB,4BAEjBE,MAAO,CACNP,KAAM,qBACNC,cAAe,2BACfC,cAAe,2BACfC,cAAe,2BACfC,cAAe,4BAEhBI,MAAO,kBACPC,MAAO,qBAQIC,EAAS,WACrB,OACC,kBAACC,EAAA,EAAD,CAAef,MAAOA,GACrB,kBAAC,qBAAD,KACC,kBAAC,EAAD,SC5CgBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1cb4cba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Drawing_Logo_Project.75d19f9b.svg\";","import React, {useState} from 'react';\nimport ProjectImage from '../images/Drawing_Logo_Project.svg';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport clsx from 'clsx';\n\nimport './Page.scss';\nimport Container from \"@material-ui/core/Container\";\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1,\n    },\n    tab: {\n        minWidth: 125,\n    },\n    contentContainer: {\n        marginTop: 25,\n    }\n});\n\n\nexport const Page = (props) => {\n\n    const classes = useStyles();\n\n    let [tab, setTab] = useState({tab: \"vision\"});\n\n    let tabContent;\n\n    switch (tab.tab) {\n        case \"vision\":\n            tabContent = \"Vision\";\n            break;\n        case \"details\":\n            tabContent = \"Details\";\n            break;\n        case \"progress\":\n            tabContent = \"Progress\";\n            break;\n        case \"jobs\":\n            tabContent = \"Jobs\";\n            break;\n        default:\n            tabContent = \"\";\n            break;\n    }\n\n    return (\n        <div>\n            <div className=\"BannerWindow\">\n                <img src={ProjectImage} alt=\"Project Logo\" className=\"Image\"/>\n                <Paper className={clsx(classes.root, \"TabPaper\")}>\n                    <Tabs\n                        value={tab.tab}\n                        onChange={(event, value) => setTab({tab: value})}\n                        indicatorColor=\"secondary\"\n                        textColor=\"secondary\"\n                        centered\n                        variant=\"scrollable\"\n                    >\n                        <Tab value=\"vision\" label=\"Vision\" className={classes.tab}/>\n                        <Tab value=\"details\" label=\"Details\" className={classes.tab}/>\n                        <Tab value=\"progress\" label=\"Progress\" className={classes.tab}/>\n                        <Tab value=\"jobs\" label=\"Jobs\" className={classes.tab}/>\n                    </Tabs>\n                </Paper>\n            </div>\n            <Container maxWidth=\"lg\" className=\"ContentContainer\">\n                <div className=\"ContentFlexBox\">\n                    {tabContent}\n                </div>\n            </Container>\n        </div>\n    );\n};\n\n","/* General Imports --------------------------------------------------------------- */\nimport React from 'react';\n\n\n/* Styling Imports --------------------------------------------------------------- */\nimport {createMuiTheme} from \"@material-ui/core/styles\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\nimport {BreakpointProvider} from 'react-socks';\nimport './Themer.scss';\n\n\n/* Component Imports ------------------------------------------------------------- */\nimport {Page} from '../App/Page';\n\n\n/* Theme ------------------------------------------------------------------------- */\n\n\nconst theme = createMuiTheme({\n\tpalette : {\n\t\tprimary: {\n\t\t\tmain: 'hsl(227, 25%, 18%)',\n\t\t\ttransparent80: 'hsla(227, 25%, 18%, 0.8)',\n\t\t\ttransparent60: 'hsla(227, 25%, 18%, 0.6)',\n\t\t\ttransparent40: 'hsla(227, 25%, 18%, 0.4)',\n\t\t\ttransparent20: 'hsla(227, 25%, 18%, 0.2)',\n\t\t\ttransparent10: 'hsla(227, 25%, 18%, 0.1)',\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: 'hsl(344, 93%, 50%)',\n\t\t\ttransparent80: 'hsla(344, 93%, 50%, 0.8)',\n\t\t\ttransparent60:  'hsla(344, 93%, 50%, 0.6)',\n\t\t\ttransparent40:  'hsla(344, 93%, 50%, 0.4)',\n\t\t\ttransparent20:  'hsla(344, 93%, 50%, 0.2)',\n\t\t\ttransparent10:  'hsla(344, 93%, 50%, 0.1)',\n\t\t},\n\t\twhite: {\n\t\t\tmain: 'rgb(255, 255, 255)',\n\t\t\ttransparent80: 'rgba(255, 255, 255, 0.8)',\n\t\t\ttransparent60: 'rgba(255, 255, 255, 0.6)',\n\t\t\ttransparent40: 'rgba(255, 255, 255, 0.4)',\n\t\t\ttransparent20: 'rgba(255, 255, 255, 0.2)',\n\t\t},\n\t\tgray1: 'hsl(0, 0%, 95%)',\n\t\tgray2: 'hsl(0, 0%, 90%)',\n\t}\n});\n\n\n/* Component --------------------------------------------------------------------- */\n\n\nexport const Themer = () => {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<BreakpointProvider>\n\t\t\t\t<Page/>\n\t\t\t</BreakpointProvider>\n\t\t</ThemeProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Themer} from './Wrapper/Themer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Themer/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}