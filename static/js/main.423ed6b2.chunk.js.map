{"version":3,"sources":["images/Drawing_Logo_Project.svg","images/Drawing_Tech_Setup.svg","images/Call_Assignment_English.svg","images/Online_Switch_English.svg","images/Filter_Criteria_English.svg","App/Tabs/VisionTab/VisionTab.jsx","App/Tabs/DetailsTab/DetailsTab.jsx","App/Tabs/JobsTab/JobsTab.jsx","App/Page.jsx","Wrapper/Themer.jsx","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","tab","minWidth","contentContainer","marginTop","margin1","marginBottom","spacing","margin2","margin3","margin4","margin5","margin6","title","subtitle","paragraph","textAlign","pinkLink","color","palette","secondary","main","VisionTab","props","url","classes","text","Typography","variant","className","email","href","Container","maxWidth","Fragment","src","DrawingTechSetup","alt","width","list","marginLeft","largeImage","imageBlock","DetailsTab","clsx","image","Sketch1","Sketch2","Sketch3","textDecoration","JobsTab","target","rel","Page","tabContent","useState","setTab","ProjectImage","Paper","Tabs","value","onChange","event","indicatorColor","textColor","centered","Tab","label","createMuiTheme","primary","transparent80","transparent60","transparent40","transparent20","transparent10","white","gray1","gray2","Themer","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.423ed6b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Drawing_Logo_Project.1730ddec.svg\";","module.exports = __webpack_public_path__ + \"static/media/Drawing_Tech_Setup.8980d734.svg\";","module.exports = __webpack_public_path__ + \"static/media/Call_Assignment_English.2022e19b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Online_Switch_English.b2f3a53f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Filter_Criteria_English.d554c939.svg\";","import React from 'react';\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\n\nimport DrawingTechSetup from '../../../images/Drawing_Tech_Setup.svg';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    tab: {\n        minWidth: 125,\n    },\n    contentContainer: {\n        marginTop: 25,\n    },\n    margin1: {\n        marginBottom: theme.spacing(1),\n    },\n    margin2: {\n        marginBottom: theme.spacing(2),\n    },\n    margin3: {\n        marginBottom: theme.spacing(3),\n    },\n    margin4: {\n        marginBottom: theme.spacing(4),\n    },\n    margin5: {\n        marginBottom: theme.spacing(5),\n    },\n    margin6: {\n        marginBottom: theme.spacing(6),\n    },\n    title: {\n        marginBottom: theme.spacing(2),\n    },\n    subtitle: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n    },\n    paragraph: {\n        textAlign: \"justify\",\n        marginBottom: theme.spacing(2),\n    },\n    pinkLink: {\n        color: theme.palette.secondary.main\n    },\n\n}));\n\n\nexport const VisionTab = (props) => {\n\n    const classes = useStyles();\n\n    function subtitle(text) {\n        return (\n            <Typography variant=\"h5\" className={classes.subtitle}>\n                {text}\n            </Typography>\n        );\n    }\n\n    function paragraph(text) {\n        return (\n            <Typography variant=\"subtitle1\" className={classes.paragraph}>\n                {text}\n            </Typography>\n        );\n    }\n\n    function link(url) {\n        return (\n            <a href={url} className={classes.pinkLink}>\n                {url}\n            </a>\n        );\n    }\n\n    function email(email) {\n        return (\n            <a href={\"mailto:\" + email} className={classes.pinkLink}>\n                {email}\n            </a>\n        );\n    }\n\n\n    return (\n        <Container maxWidth=\"sm\" className=\"TopContainer BottomContainer\">\n            <div className=\"ContentFlexBox\">\n                <Typography variant=\"h4\" className={classes.title}>Vision</Typography>\n\n                {subtitle(\n                    <React.Fragment>\n                        What do we do?\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n                        Tons of forums for local help are currently coming online/being developed. However,\n                        do these online-forums really reach the ones threaded the most by a COVID-19 infection?\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n                        <strong>No!</strong> Many of these people do not use the internet.\n                        That is why we've built <strong>a hotline</strong> to close that gap.\n                    </React.Fragment>\n                )}\n\n                <img src={DrawingTechSetup} alt=\"Tech Setup\" className={classes.margin2}/>\n\n\n                {subtitle(\n                    <React.Fragment>\n                        Who is our service for?\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n                        <strong>1. People in need:</strong> Either we already have volunteers in that area which are\n                        using\n                        our hotline or we can help these people find a local volunteer in that area on a forum\n                        like&nbsp;\n                        {link(\"https://www.helferlein.me/\")}.\n\n                        <br/><br/><br/>\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n                        <strong>2. Volunteers:</strong> Either you can help locally or you can help them find a suitable\n                        volunteer on mentioned online forums. Sometimes the callers might just want to have a friendly\n                        conversation since they are even more isolated in these days.\n\n                        <br/><br/><br/>\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n                        <strong>3. Communities that already offer a phone service:</strong> Your phone service is\n                        probably\n                        not operational 24/7. It does not have to be!\n\n                        <br/><br/>\n\n                        When becoming a part of our hotline you will still be able to get called directly. In addition\n                        to\n                        that, you can manually switch the call forward <em>on</em> or <em>off</em> anytime.\n\n                        <br/><br/>\n\n                        Whenever you are either in a call or <em>offline</em> (forwarding disabled) all the calls will\n                        still\n                        get answered by our system and stored in our database.\n\n                        <br/><br/>\n\n                        Whenever you'd like to fulfill one of the requests from the database you can click \"accept call\"\n                        and\n                        get assigned one of these requests with the associated phone number you are asked to call back.\n\n                        <br/><br/>\n\n                        You can easily set up an automatic <em>online</em>/<em>offline</em> schedule.\n\n                        <br/><br/>\n\n                        We'd love to hear from you! Contact us via {email(\"collab@helperline.io\")}.\n\n                        <br/><br/><br/>\n                    </React.Fragment>\n                )}\n\n                {paragraph(\n                    <React.Fragment>\n\n                        <strong>4. Online-Forums that want to include a (better) phone-API:</strong> We'd love to\n                        collaborate\n                        with as many other online forums as possible! There are multiple ways how we might collaborate:\n\n                        <br/><br/>\n\n                        a) Sharing of knowledge\n\n                        <br/><br/>\n\n                        b) Sharing of resources: We could make use of more volunteers! You could make use of more actual\n                        \"help-listings\" on your page!\n\n                        <br/><br/>\n\n                        c) Merging of features: You want to offer hotline functionality to your helpers as well? Great!\n                        We\n                        can talk about implementing the features from our \"calls\"-page inside your app using our API!\n                        That\n                        way you can offer our well thought-out hotline-system to your volunteer which don't even have to\n                        leave your app and don't have to sign up for yet another service!\n\n                        <br/><br/>\n\n                        Bigger network, stronger service! Contact us via {email(\"collab@helperline.io\")}.\n\n                    </React.Fragment>\n                )}\n\n            </div>\n        </Container>\n    );\n};\n\n","import React from 'react';\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\n\nimport Sketch1 from '../../../images/Call_Assignment_English.svg';\nimport Sketch2 from '../../../images/Online_Switch_English.svg';\nimport Sketch3 from '../../../images/Filter_Criteria_English.svg';\nimport clsx from \"clsx\";\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    tab: {\n        minWidth: 125,\n    },\n    contentContainer: {\n        marginTop: 25,\n    },\n    margin1: {\n        marginBottom: theme.spacing(1),\n    },\n    margin2: {\n        marginBottom: theme.spacing(2),\n    },\n    margin3: {\n        marginBottom: theme.spacing(3),\n    },\n    margin4: {\n        marginBottom: theme.spacing(4),\n    },\n    margin5: {\n        marginBottom: theme.spacing(5),\n    },\n    margin6: {\n        marginBottom: theme.spacing(6),\n    },\n    title: {\n        marginBottom: theme.spacing(2),\n    },\n    subtitle: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n    },\n    paragraph: {\n        width: \"100%\",\n        textAlign: \"left\",\n    },\n    list: {\n        width: \"calc(100% - 30px)\",\n        marginLeft: \"30px\",\n        textAlign: \"left\",\n    },\n    pinkLink: {\n        color: theme.palette.secondary.main\n    },\n    largeImage: {\n        maxWidth: \"100%\",\n    },\n    imageBlock: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(4),\n    },\n\n}));\n\n\nexport const DetailsTab = () => {\n\n    const classes = useStyles();\n\n    function subtitle(text) {\n        return (\n            <Typography variant=\"h5\" className={clsx(classes.subtitle, classes.margin2)}>\n                {text}\n            </Typography>\n        );\n    }\n\n    function paragraph(text) {\n        return (\n            <Typography variant=\"subtitle1\" className={clsx(classes.paragraph, classes.margin2)}>\n                {text}\n            </Typography>\n        );\n    }\n\n    function list(text) {\n        return (\n            <Typography variant=\"subtitle1\" className={classes.list}>\n                {text}\n            </Typography>\n        );\n    }\n\n    function image(src, alt) {\n        return (\n            <Container maxWidth=\"md\" className={classes.imageBlock}>\n                <div className=\"ContentFlexBox\">\n                    <img src={src} alt={alt} className={classes.largeImage}/>\n                </div>\n            </Container>\n        );\n    }\n\n\n    return (\n        <React.Fragment>\n            <Container maxWidth=\"sm\" className=\"TopContainer\">\n                <div className=\"ContentFlexBox\">\n                    <Typography variant=\"h4\" className={classes.title}>Details</Typography>\n\n                    {subtitle(\"The Process of Assigning Calls\")}\n\n                    <Typography variant=\"subtitle1\" className={clsx(classes.paragraph)}>\n                        Our strategy is to <strong>offer both services</strong>:\n                    </Typography>\n                    <Typography variant=\"subtitle1\" className={clsx(classes.list)}>\n                        <ul>\n                            <li>\n                                <strong>Manually accepting calls</strong> whenever the user wants to\n                            </li>\n                            <li>\n                                <strong>Call forwarding</strong> only if the user sets it up\n                            </li>\n                        </ul>\n                    </Typography>\n\n                    <Typography variant=\"subtitle1\" className={clsx(classes.paragraph, classes.margin4)}>\n                        No user will be called directly without explicitly setting it up!\n                    </Typography>\n\n                    {paragraph(\n                        <React.Fragment>\n                            Whenever a <strong>call comes in</strong> (top part of the following image) <strong>we try\n                            to immediately forward it </strong>to a volunteer that is currently \"online\" (= accepting\n                            call forwarding) that matches the calls requirements.\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            <strong>If there is no such volunteer available</strong> right away we tell the caller that\n                            we will call them back shortly and <strong>put that call in the local/global queue</strong>\n                            - depending on the call type.\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            The calls from these queues can only be served when clicking \"accept call\".\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            After all certain time, local calls can also be accepted globally: <strong>In case there is\n                            no volunteer from our hotline in that area</strong> we can help the caller find one in one\n                            of many online-first forums.\n                        </React.Fragment>\n                    )}\n                </div>\n            </Container>\n\n            {image(Sketch1, \"Call Assignment\")}\n\n            <Container maxWidth=\"sm\">\n                <div className=\"ContentFlexBox\">\n                    {paragraph(\n                        <React.Fragment>\n                            On the volunteer side whenever the volunteer clicks \"accept call\", he gets assigned a call\n                            form those queues, which matches his filter criteria (see below).\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            After some more time any call (urgent queue) will be preferred over regular local/global\n                            calls so that callers do not have to wait indefinitely. Filter criteria still apply.\n                        </React.Fragment>\n                    )}\n\n                    {subtitle(\"When can volunteers be called directly?\")}\n\n                    {paragraph(\n                        <React.Fragment>\n                            In order to enable that feature, a volunteer has to enter his number on the \"account\"-page\n                            and confirm it (SMS Token, like the email confirmation).\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            Once he has done that, in the \"calls\"-tab he can manually click \"go online\" are can set up\n                            a time triggered online/offline schedule.\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            <em>These features have not been released yet.</em>\n                        </React.Fragment>\n                    )}\n                </div>\n            </Container>\n\n            {image(Sketch2, \"Call Forwarding\")}\n\n            <Container maxWidth=\"sm\">\n                <div className=\"ContentFlexBox\">\n                    {subtitle(\"Which calls will be assigned?\")}\n\n                    {paragraph(\n                        <React.Fragment>\n                            Every volunteer can set filters to define which calls they want to take.\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            Right now we only offer three options: <strong>All calls</strong>, <strong>Only local calls\n                            </strong> (e.g. \"I don't want to mediate callers and other volunteers, I want to help in\n                            person\") and <strong>Only global calls</strong> (e.g. \"I dont't want to leave my house but\n                            still be able to help\" -> Online-Services, Mediation, Just Talking).\n                        </React.Fragment>\n                    )}\n\n                    {paragraph(\n                        <React.Fragment>\n                            Of course these filters are not perfect yet! But extending them is really simple on the tech\n                            side, so we will definitely have more of these in the future!\n                        </React.Fragment>\n                    )}\n                </div>\n            </Container>\n\n            {image(Sketch3, \"Call Filtering\")}\n\n            <Container className=\"BottomContainer\"/>\n        </React.Fragment>\n    );\n};\n\n","import React from 'react';\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    tab: {\n        minWidth: 125,\n    },\n    contentContainer: {\n        marginTop: 25,\n    },\n    margin1: {\n        marginBottom: theme.spacing(1),\n    },\n    margin2: {\n        marginBottom: theme.spacing(2),\n    },\n    margin3: {\n        marginBottom: theme.spacing(3),\n    },\n    margin4: {\n        marginBottom: theme.spacing(4),\n    },\n    margin5: {\n        marginBottom: theme.spacing(5),\n    },\n    margin6: {\n        marginBottom: theme.spacing(6),\n    },\n    title: {\n        marginBottom: theme.spacing(2),\n    },\n    subtitle: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n    },\n    paragraph: {\n        textAlign: \"justify\",\n        marginBottom: theme.spacing(2),\n    },\n    pinkLink: {\n        textDecoration: \"none\",\n        color: theme.palette.secondary.main\n    },\n\n}));\n\n\nexport const JobsTab = (props) => {\n\n    const classes = useStyles();\n\n    function paragraph(text) {\n        return (\n            <Typography variant=\"subtitle1\" className={classes.paragraph}>\n                {text}\n            </Typography>\n        );\n    }\n\n\n    return (\n        <Container maxWidth=\"sm\" className=\"TopContainer BottomContainer\">\n            <div className=\"ContentFlexBox\">\n                <Typography variant=\"h4\" className={classes.title}>Jobs</Typography>\n\n                {paragraph(\n                    <React.Fragment>\n                        Coming soon! Until then: see&nbsp;\n                        <a className={classes.pinkLink}\n                           href=\"https://github.com/Hilfe-am-Ohr/task-collection/blob/master/jobs.md\"\n                           target=\"_blank\" rel=\"noopener noreferrer\"><strong>jobs.md</strong></a>\n                    </React.Fragment>\n                )}\n            </div>\n        </Container>\n    );\n};\n\n","import React, {useState} from 'react';\nimport ProjectImage from '../images/Drawing_Logo_Project.svg';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport clsx from 'clsx';\n\nimport './Page.scss';\n\nimport {VisionTab} from './Tabs/VisionTab/VisionTab';\nimport {DetailsTab} from './Tabs/DetailsTab/DetailsTab';\nimport {JobsTab} from './Tabs/JobsTab/JobsTab';\n\n\nconst useStyles = makeStyles({\n    root: {\n        flexGrow: 1,\n    },\n    tab: {\n        minWidth: 125,\n    },\n    contentContainer: {\n        marginTop: 25,\n    }\n});\n\n\nexport const Page = (props) => {\n\n    const classes = useStyles();\n\n    let [tab, setTab] = useState({tab: \"vision\"});\n\n    let tabContent;\n\n    switch (tab.tab) {\n        case \"vision\":\n            tabContent = <VisionTab/>;\n            break;\n        case \"details\":\n            tabContent = <DetailsTab/>;\n            break;\n        case \"jobs\":\n            tabContent = <JobsTab/>;\n            break;\n        default:\n            tabContent = \"\";\n            break;\n    }\n\n    return (\n        <div>\n            <div className=\"BannerWindow\">\n                <img src={ProjectImage} alt=\"Project Logo\" className=\"Image\"/>\n                <Paper className={clsx(classes.root, \"TabPaper\")}>\n                    <Tabs\n                        value={tab.tab}\n                        onChange={(event, value) => setTab({tab: value})}\n                        indicatorColor=\"secondary\"\n                        textColor=\"secondary\"\n                        centered\n                        variant=\"scrollable\"\n                    >\n                        <Tab value=\"vision\" label=\"Vision\" className={classes.tab}/>\n                        <Tab value=\"details\" label=\"Details\" className={classes.tab}/>\n                        <Tab value=\"jobs\" label=\"Jobs\" className={classes.tab}/>\n                    </Tabs>\n                </Paper>\n            </div>\n            {tabContent}\n        </div>\n    );\n};\n\n","/* General Imports --------------------------------------------------------------- */\nimport React from 'react';\n\n\n/* Styling Imports --------------------------------------------------------------- */\nimport {createMuiTheme} from \"@material-ui/core/styles\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\nimport {BreakpointProvider} from 'react-socks';\nimport './Themer.scss';\n\n\n/* Component Imports ------------------------------------------------------------- */\nimport {Page} from '../App/Page';\n\n\n/* Theme ------------------------------------------------------------------------- */\n\n\nconst theme = createMuiTheme({\n\tpalette : {\n\t\tprimary: {\n\t\t\tmain: 'hsl(227, 25%, 18%)',\n\t\t\ttransparent80: 'hsla(227, 25%, 18%, 0.8)',\n\t\t\ttransparent60: 'hsla(227, 25%, 18%, 0.6)',\n\t\t\ttransparent40: 'hsla(227, 25%, 18%, 0.4)',\n\t\t\ttransparent20: 'hsla(227, 25%, 18%, 0.2)',\n\t\t\ttransparent10: 'hsla(227, 25%, 18%, 0.1)',\n\t\t},\n\t\tsecondary: {\n\t\t\tmain: 'hsl(344, 93%, 50%)',\n\t\t\ttransparent80: 'hsla(344, 93%, 50%, 0.8)',\n\t\t\ttransparent60:  'hsla(344, 93%, 50%, 0.6)',\n\t\t\ttransparent40:  'hsla(344, 93%, 50%, 0.4)',\n\t\t\ttransparent20:  'hsla(344, 93%, 50%, 0.2)',\n\t\t\ttransparent10:  'hsla(344, 93%, 50%, 0.1)',\n\t\t},\n\t\twhite: {\n\t\t\tmain: 'rgb(255, 255, 255)',\n\t\t\ttransparent80: 'rgba(255, 255, 255, 0.8)',\n\t\t\ttransparent60: 'rgba(255, 255, 255, 0.6)',\n\t\t\ttransparent40: 'rgba(255, 255, 255, 0.4)',\n\t\t\ttransparent20: 'rgba(255, 255, 255, 0.2)',\n\t\t},\n\t\tgray1: 'hsl(0, 0%, 95%)',\n\t\tgray2: 'hsl(0, 0%, 90%)',\n\t}\n});\n\n\n/* Component --------------------------------------------------------------------- */\n\n\nexport const Themer = () => {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<BreakpointProvider>\n\t\t\t\t<Page/>\n\t\t\t</BreakpointProvider>\n\t\t</ThemeProvider>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Themer} from './Wrapper/Themer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Themer/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}